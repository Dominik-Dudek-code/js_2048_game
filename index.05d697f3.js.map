{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.initialState = this.boardDeepCopy(initialState);\n        this.board = this.boardDeepCopy(initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                this.performMove(function(board) {\n                    return _this.joinTiles(board);\n                });\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                this.performMove(function(board) {\n                    return _this.reverse(_this.joinTiles(_this.reverse(board)));\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                this.performMove(function(board) {\n                    var transposed = _this.transpose(board);\n                    var joined = _this.joinTiles(transposed);\n                    return _this.transpose(joined);\n                });\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                this.performMove(function(board) {\n                    var transposed = _this.transpose(board);\n                    var reversed = _this.reverse(transposed);\n                    var joined = _this.joinTiles(reversed);\n                    var restored = _this.reverse(joined);\n                    return _this.transpose(restored);\n                });\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.boardDeepCopy(this.board);\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.status = \"idle\";\n                this.board = this.boardDeepCopy(this.initialState);\n                this.score = 0;\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = this.board.reduce(function(acc, row, rowIndex) {\n                    row.forEach(function(cell, colIndex) {\n                        if (cell === 0) acc.push({\n                            row: rowIndex,\n                            col: colIndex\n                        });\n                    });\n                    return acc;\n                }, []);\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row = _emptyCells_Math_floor.row, col = _emptyCells_Math_floor.col;\n                    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n                }\n                if (this.isGameOver()) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"joinTiles\",\n            value: function joinTiles(board) {\n                var _this = this;\n                return board.map(function(line) {\n                    var filteredLine = line.filter(function(value) {\n                        return value !== 0;\n                    });\n                    for(var i = 0; i < filteredLine.length; i++)if (filteredLine[i] === filteredLine[i + 1]) {\n                        filteredLine[i] *= 2;\n                        _this.score += filteredLine[i];\n                        if (filteredLine[i] === 2048) _this.status = \"win\";\n                        filteredLine.splice(i + 1, 1);\n                    }\n                    while(filteredLine.length < 4)filteredLine.push(0);\n                    return filteredLine;\n                });\n            }\n        },\n        {\n            key: \"transpose\",\n            value: function transpose(board) {\n                return board[0].map(function(_, colInd) {\n                    return board.map(function(row) {\n                        return row[colInd];\n                    });\n                });\n            }\n        },\n        {\n            key: \"reverse\",\n            value: function reverse(board) {\n                return board.map(function(line) {\n                    return line.reverse();\n                });\n            }\n        },\n        {\n            key: \"boardDeepCopy\",\n            value: function boardDeepCopy(toCopy) {\n                return JSON.parse(JSON.stringify(toCopy));\n            }\n        },\n        {\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    var current = this.board[i][j];\n                    if (this.board[i][j] === 0 || i < 3 && current === this.board[i + 1][j] || j < 3 && current === this.board[i][j + 1]) return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"performMove\",\n            value: function performMove(moveFunction) {\n                if (this.status !== \"playing\") return;\n                var boardBeforeMove = JSON.stringify(this.board);\n                this.board = moveFunction(this.board);\n                if (JSON.stringify(this.board) !== boardBeforeMove) this.addRandomTile();\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\nvar $197cd56b15c33885$var$gameButton = document.querySelector(\".button\");\nvar $197cd56b15c33885$var$gameScore = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$messageWin = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$messageLose = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$messageStart = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$gameField = document.querySelector(\".game-field\");\ndocument.addEventListener(\"keyup\", function(arrow) {\n    if ($197cd56b15c33885$var$game.status === \"playing\") {\n        switch(arrow.key){\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            default:\n                break;\n        }\n        $197cd56b15c33885$var$updateUi($197cd56b15c33885$var$game.board);\n        if ($197cd56b15c33885$var$game.getStatus() === \"win\") $197cd56b15c33885$var$messageWin.classList.remove(\"hidden\");\n        if ($197cd56b15c33885$var$game.getStatus() === \"lose\") $197cd56b15c33885$var$messageLose.classList.remove(\"hidden\");\n    }\n});\nfunction $197cd56b15c33885$var$updateUi(board) {\n    var cells = $197cd56b15c33885$var$gameField.querySelectorAll(\".field-cell\");\n    board.flat().forEach(function(value, index) {\n        var cell = cells[index];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell \".concat(value > 0 ? \"field-cell--\".concat(value) : \"\");\n    });\n    $197cd56b15c33885$var$gameScore.textContent = $197cd56b15c33885$var$game.getScore();\n}\n$197cd56b15c33885$var$gameButton.addEventListener(\"click\", function(e) {\n    var button = e.target;\n    if (button.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$game.start();\n        button.classList.replace(\"start\", \"restart\");\n        button.textContent = \"Restart\";\n        $197cd56b15c33885$var$messageStart.classList.add(\"hidden\");\n        $197cd56b15c33885$var$updateUi($197cd56b15c33885$var$game.board);\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        button.classList.replace(\"restart\", \"start\");\n        button.textContent = \"Start\";\n        $197cd56b15c33885$var$messageStart.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$messageWin.classList.add(\"hidden\");\n        $197cd56b15c33885$var$messageLose.classList.add(\"hidden\");\n        $197cd56b15c33885$var$updateUi($197cd56b15c33885$var$game.board);\n    }\n});\n\n})();\n//# sourceMappingURL=index.05d697f3.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n\nconst gameButton = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\nconst gameField = document.querySelector('.game-field');\n\ndocument.addEventListener('keyup', (arrow) => {\n  if (game.status === 'playing') {\n    switch (arrow.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      default:\n        break;\n    }\n\n    updateUi(game.board);\n\n    if (game.getStatus() === 'win') {\n      messageWin.classList.remove('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      messageLose.classList.remove('hidden');\n    }\n  }\n});\n\nfunction updateUi(board) {\n  const cells = gameField.querySelectorAll('.field-cell');\n\n  board.flat().forEach((value, index) => {\n    const cell = cells[index];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : ''}`;\n  });\n\n  gameScore.textContent = game.getScore();\n}\n\ngameButton.addEventListener('click', (e) => {\n  const button = e.target;\n\n  if (button.classList.contains('start')) {\n    game.start();\n    button.classList.replace('start', 'restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n    updateUi(game.board);\n  } else {\n    game.restart();\n\n    button.classList.replace('restart', 'start');\n    button.textContent = 'Start';\n\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    updateUi(game.board);\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n\n    this.initialState = this.boardDeepCopy(initialState);\n    this.board = this.boardDeepCopy(initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    this.performMove((board) => this.joinTiles(board));\n  }\n\n  moveRight() {\n    this.performMove((board) => {\n      return this.reverse(this.joinTiles(this.reverse(board)));\n    });\n  }\n\n  moveUp() {\n    this.performMove((board) => {\n      const transposed = this.transpose(board);\n      const joined = this.joinTiles(transposed);\n\n      return this.transpose(joined);\n    });\n  }\n\n  moveDown() {\n    this.performMove((board) => {\n      const transposed = this.transpose(board);\n      const reversed = this.reverse(transposed);\n      const joined = this.joinTiles(reversed);\n      const restored = this.reverse(joined);\n\n      return this.transpose(restored);\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.boardDeepCopy(this.board);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.board = this.boardDeepCopy(this.initialState);\n    this.score = 0;\n  }\n\n  // Add your own methods here\n\n  addRandomTile() {\n    const emptyCells = this.board.reduce((acc, row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          acc.push({ row: rowIndex, col: colIndex });\n        }\n      });\n\n      return acc;\n    }, []);\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n\n    if (this.isGameOver()) {\n      this.status = 'lose';\n    }\n  }\n\n  joinTiles(board) {\n    return board.map((line) => {\n      const filteredLine = line.filter((value) => value !== 0);\n\n      for (let i = 0; i < filteredLine.length; i++) {\n        if (filteredLine[i] === filteredLine[i + 1]) {\n          filteredLine[i] *= 2;\n          this.score += filteredLine[i];\n\n          if (filteredLine[i] === 2048) {\n            this.status = 'win';\n          }\n\n          filteredLine.splice(i + 1, 1);\n        }\n      }\n\n      while (filteredLine.length < 4) {\n        filteredLine.push(0);\n      }\n\n      return filteredLine;\n    });\n  }\n\n  transpose(board) {\n    return board[0].map((_, colInd) => board.map((row) => row[colInd]));\n  }\n\n  reverse(board) {\n    return board.map((line) => line.reverse());\n  }\n\n  boardDeepCopy(toCopy) {\n    return JSON.parse(JSON.stringify(toCopy));\n  }\n\n  isGameOver() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this.board[i][j];\n\n        if (\n          this.board[i][j] === 0 ||\n          (i < 3 && current === this.board[i + 1][j]) ||\n          (j < 3 && current === this.board[i][j + 1])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  performMove(moveFunction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const boardBeforeMove = JSON.stringify(this.board);\n\n    this.board = moveFunction(this.board);\n\n    if (JSON.stringify(this.board) !== boardBeforeMove) {\n      this.addRandomTile();\n    }\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","length","instance","Constructor","TypeError","console","log","boardDeepCopy","board","score","status","key","value","_this","performMove","joinTiles","reverse","transposed","transpose","joined","reversed","restored","addRandomTile","emptyCells","reduce","acc","row","rowIndex","forEach","cell","colIndex","push","col","_emptyCells_Math_floor","Math","floor","random","isGameOver","map","line","filteredLine","filter","i","splice","_","colInd","toCopy","JSON","parse","stringify","j","current","moveFunction","boardBeforeMove","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$gameButton","document","querySelector","$197cd56b15c33885$var$gameScore","$197cd56b15c33885$var$messageWin","$197cd56b15c33885$var$messageLose","$197cd56b15c33885$var$messageStart","$197cd56b15c33885$var$gameField","$197cd56b15c33885$var$updateUi","cells","querySelectorAll","flat","index","textContent","className","concat","getScore","addEventListener","arrow","moveUp","moveDown","moveRight","moveLeft","getStatus","classList","remove","e","button","contains","start","replace","add","restart"],"version":3,"file":"index.05d697f3.js.map"}