{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        console.log(initialState);\n        this.initialState = this.boardDeepCopy(initialState);\n        this.board = this.boardDeepCopy(initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        this.performMove((board)=>this.joinTiles(board));\n    }\n    moveRight() {\n        this.performMove((board)=>{\n            return this.reverse(this.joinTiles(this.reverse(board)));\n        });\n    }\n    moveUp() {\n        this.performMove((board)=>{\n            const transposed = this.transpose(board);\n            const joined = this.joinTiles(transposed);\n            return this.transpose(joined);\n        });\n    }\n    moveDown() {\n        this.performMove((board)=>{\n            const transposed = this.transpose(board);\n            const reversed = this.reverse(transposed);\n            const joined = this.joinTiles(reversed);\n            const restored = this.reverse(joined);\n            return this.transpose(restored);\n        });\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.boardDeepCopy(this.board);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.status = \"idle\";\n        this.board = this.boardDeepCopy(this.initialState);\n        this.score = 0;\n    }\n    // Add your own methods here\n    addRandomTile() {\n        const emptyCells = this.board.reduce((acc, row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (cell === 0) acc.push({\n                    row: rowIndex,\n                    col: colIndex\n                });\n            });\n            return acc;\n        }, []);\n        if (emptyCells.length > 0) {\n            const { row: row, col: col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n        if (this.isGameOver()) this.status = \"lose\";\n    }\n    joinTiles(board) {\n        return board.map((line)=>{\n            const filteredLine = line.filter((value)=>value !== 0);\n            for(let i = 0; i < filteredLine.length; i++)if (filteredLine[i] === filteredLine[i + 1]) {\n                filteredLine[i] *= 2;\n                this.score += filteredLine[i];\n                if (filteredLine[i] === 2048) this.status = \"win\";\n                filteredLine.splice(i + 1, 1);\n            }\n            while(filteredLine.length < 4)filteredLine.push(0);\n            return filteredLine;\n        });\n    }\n    transpose(board) {\n        return board[0].map((_, colInd)=>board.map((row)=>row[colInd]));\n    }\n    reverse(board) {\n        return board.map((line)=>line.reverse());\n    }\n    boardDeepCopy(toCopy) {\n        return JSON.parse(JSON.stringify(toCopy));\n    }\n    isGameOver() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            const current = this.board[i][j];\n            if (this.board[i][j] === 0 || i < 3 && current === this.board[i + 1][j] || j < 3 && current === this.board[i][j + 1]) return false;\n        }\n        return true;\n    }\n    performMove(moveFunction) {\n        if (this.status !== \"playing\") return;\n        const boardBeforeMove = JSON.stringify(this.board);\n        this.board = moveFunction(this.board);\n        if (JSON.stringify(this.board) !== boardBeforeMove) this.addRandomTile();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$gameButton = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\ndocument.addEventListener(\"keyup\", (arrow)=>{\n    if ($09e991522ca7e64e$var$game.status === \"playing\") {\n        switch(arrow.key){\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            default:\n                break;\n        }\n        $09e991522ca7e64e$var$updateUi($09e991522ca7e64e$var$game.board);\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    }\n});\nfunction $09e991522ca7e64e$var$updateUi(board) {\n    const cells = $09e991522ca7e64e$var$gameField.querySelectorAll(\".field-cell\");\n    board.flat().forEach((value, index)=>{\n        const cell = cells[index];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : \"\"}`;\n    });\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\n$09e991522ca7e64e$var$gameButton.addEventListener(\"click\", (e)=>{\n    const button = e.target;\n    if (button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        button.classList.replace(\"start\", \"restart\");\n        button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$updateUi($09e991522ca7e64e$var$game.board);\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        button.classList.replace(\"restart\", \"start\");\n        button.textContent = \"Start\";\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$updateUi($09e991522ca7e64e$var$game.board);\n    }\n});\n\n\n//# sourceMappingURL=index.29810d34.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n\nconst gameButton = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\nconst gameField = document.querySelector('.game-field');\n\ndocument.addEventListener('keyup', (arrow) => {\n  if (game.status === 'playing') {\n    switch (arrow.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      default:\n        break;\n    }\n\n    updateUi(game.board);\n\n    if (game.getStatus() === 'win') {\n      messageWin.classList.remove('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      messageLose.classList.remove('hidden');\n    }\n  }\n});\n\nfunction updateUi(board) {\n  const cells = gameField.querySelectorAll('.field-cell');\n\n  board.flat().forEach((value, index) => {\n    const cell = cells[index];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = `field-cell ${value > 0 ? `field-cell--${value}` : ''}`;\n  });\n\n  gameScore.textContent = game.getScore();\n}\n\ngameButton.addEventListener('click', (e) => {\n  const button = e.target;\n\n  if (button.classList.contains('start')) {\n    game.start();\n    button.classList.replace('start', 'restart');\n    button.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n    updateUi(game.board);\n  } else {\n    game.restart();\n\n    button.classList.replace('restart', 'start');\n    button.textContent = 'Start';\n\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    updateUi(game.board);\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    console.log(initialState);\n\n    this.initialState = this.boardDeepCopy(initialState);\n    this.board = this.boardDeepCopy(initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    this.performMove((board) => this.joinTiles(board));\n  }\n\n  moveRight() {\n    this.performMove((board) => {\n      return this.reverse(this.joinTiles(this.reverse(board)));\n    });\n  }\n\n  moveUp() {\n    this.performMove((board) => {\n      const transposed = this.transpose(board);\n      const joined = this.joinTiles(transposed);\n\n      return this.transpose(joined);\n    });\n  }\n\n  moveDown() {\n    this.performMove((board) => {\n      const transposed = this.transpose(board);\n      const reversed = this.reverse(transposed);\n      const joined = this.joinTiles(reversed);\n      const restored = this.reverse(joined);\n\n      return this.transpose(restored);\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.boardDeepCopy(this.board);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.status = 'idle';\n    this.board = this.boardDeepCopy(this.initialState);\n    this.score = 0;\n  }\n\n  // Add your own methods here\n\n  addRandomTile() {\n    const emptyCells = this.board.reduce((acc, row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          acc.push({ row: rowIndex, col: colIndex });\n        }\n      });\n\n      return acc;\n    }, []);\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n\n    if (this.isGameOver()) {\n      this.status = 'lose';\n    }\n  }\n\n  joinTiles(board) {\n    return board.map((line) => {\n      const filteredLine = line.filter((value) => value !== 0);\n\n      for (let i = 0; i < filteredLine.length; i++) {\n        if (filteredLine[i] === filteredLine[i + 1]) {\n          filteredLine[i] *= 2;\n          this.score += filteredLine[i];\n\n          if (filteredLine[i] === 2048) {\n            this.status = 'win';\n          }\n\n          filteredLine.splice(i + 1, 1);\n        }\n      }\n\n      while (filteredLine.length < 4) {\n        filteredLine.push(0);\n      }\n\n      return filteredLine;\n    });\n  }\n\n  transpose(board) {\n    return board[0].map((_, colInd) => board.map((row) => row[colInd]));\n  }\n\n  reverse(board) {\n    return board.map((line) => line.reverse());\n  }\n\n  boardDeepCopy(toCopy) {\n    return JSON.parse(JSON.stringify(toCopy));\n  }\n\n  isGameOver() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const current = this.board[i][j];\n\n        if (\n          this.board[i][j] === 0 ||\n          (i < 3 && current === this.board[i + 1][j]) ||\n          (j < 3 && current === this.board[i][j + 1])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  performMove(moveFunction) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const boardBeforeMove = JSON.stringify(this.board);\n\n    this.board = moveFunction(this.board);\n\n    if (JSON.stringify(this.board) !== boardBeforeMove) {\n      this.addRandomTile();\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","console","log","boardDeepCopy","board","score","status","moveLeft","performMove","joinTiles","moveRight","reverse","moveUp","transposed","transpose","joined","moveDown","reversed","restored","getScore","getState","getStatus","start","addRandomTile","restart","emptyCells","reduce","acc","row","rowIndex","forEach","cell","colIndex","push","col","length","Math","floor","random","isGameOver","map","line","filteredLine","filter","value","i","splice","_","colInd","toCopy","JSON","parse","stringify","j","current","moveFunction","boardBeforeMove","$09e991522ca7e64e$var$gameButton","document","querySelector","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$updateUi","cells","querySelectorAll","flat","index","textContent","className","addEventListener","arrow","key","classList","remove","e","button","target","contains","replace","add"],"version":3,"file":"index.29810d34.js.map"}